#!/usr/bin/env python3

import subprocess
import os.path
import re
import itertools

def check_filename(filename):
    """Check that this file belongs to a port"""
    false_output = "is not provided by a MacPorts port.$"
    true_output =  "is provided by: ([\w\-_]+)"
    
    
    port_args = ['port', 'provides', os.path.abspath(filename)]
    provided_by = subprocess.check_output(port_args, universal_newlines=True)
    
    false_match = re.search(false_output, provided_by)
    true_match = re.search(true_output, provided_by)
    if false_match:
        return (filename, False, "") # (provided, portname)
    elif true_match:
        port_name = true_match.group(1)
        return (filename, True, port_name)
    else:
        raise ValueError("Expression could not match '{:s}'".format(provided_by))
    

def found_callback(filename, found, port_name):
    """Callback for what to do with found items/."""
    if not found:
        print("{} is an orphaned file.".format(os.path.relpath(filename)))
    
def has_nonorphans(results):
    """Check for non-orphans in a given result"""
    return any(found for filename, found, port_name in results)
    
def remove_subdirs(orphans, base=None):
    """Remove any subdirectories of parents."""
    
    duplicates = set()
    no_nonorphans = set()
    for parent in orphans.keys():
        if parent in duplicates:
            continue
        parent_has_nonorphans = has_nonorphans(orphans[parent])
        children = [ directory for directory in orphans.keys() if (parent in directory and parent != directory) ]
        children_have_nonorphans = any( has_nonorphans(orphans[child]) for child in children)
        if not (children_have_nonorphans or parent_has_nonorphans):
            if (base is not None) and (parent == base):
                continue
            duplicates.update(children)
            no_nonorphans.difference_update(children)
            no_nonorphans.add(parent)
    
    for dup in duplicates:
        del orphans[dup]
    
    no_nonorphans = list(no_nonorphans)
    no_nonorphans.sort()
    
    files = set()
    for directory in orphans:
        if directory not in no_nonorphans:
            for filename, found, port_name in orphaned_files[directory]:
                if not found:
                    files.add(filename)
    files = list(files)
    files.sort()
    return orphans, no_nonorphans, files
    
def get_state(statefile, base):
    """Try to get the state from a statefile."""
    if os.path.exists(statefile):
        print("Loading progress from {}".format(statefile))
        import pickle
        try:
            with open(statefile, "rb") as stream:
                orphaned_files = pickle.load(stream)
                old_base = pickle.load(stream)
        except:
            print("Removing broken statefile.")
            os.remove(statefile)
        if old_base != base:
            print("Removing old statefile.")
            os.remove(statefile)
        else:
            print("Loaded progress on {:d} directories.".format(len(orphaned_files)))
            return orphaned_files
    
    print("Starting from scratch")
    return dict()

def save_state(statefile, base, orphaned_files):
    """Pickle the current state to a statefile"""
    print("\nSaving progress to {}".format(statefile))
    import pickle
    with open(statefile, "wb") as stream:
        pickle.dump(orphaned_files, stream)
        pickle.dump(base, stream)

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) == 2:
        statefile = os.path.expanduser(sys.argv[1])
    elif len(sys.argv) == 1:
        statefile = os.path.expanduser("~/.port-orphans-progress")
    else:
        print("Usage: {} [statefile]".format(sys.argv[0]))
        sys.exit(1)
    
    base = os.getcwd()
    
    # Save the statespace
    orphaned_files = get_state(statefile, base)
    
    try:
        for root, dirs, files in os.walk(base):
            if root in orphaned_files:
                continue
            print(".", end="", flush=True)
            orphaned_files[root] = [ check_filename(os.path.join(root, filename)) for filename in files ]
    except KeyboardInterrupt:
        print("\nKeyboardInetrrupt: Finishing anyways.")
        pass
    finally:
        save_state(statefile, base, orphaned_files)
    
    orphaned_files, no_nonorphans, files = remove_subdirs(orphaned_files, base)
    print("Directories which have no port files:")
    for directory in no_nonorphans:
        print(directory)
    print("Files which are orphened:")
    for filename in files:
        print(filename)




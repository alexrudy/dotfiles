#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  pushover
#  Send yourself notifications via https://pushover.net
#  Just set your pushover user ID to PUSHOVER_USER_ID
#  and your application API token to PUSHOVER_API_TOKEN
#  then call this script with the message you want to
#  send::
#  
#  $ make test; pushover "make test finished!"
#
#  Copyright 2017 Alexander Rudy. All rights reserved.
#

import sys
import os
import requests
import click

def send_message(text, credentials=None):
    """Send a message"""
    payload = {"message": text}
    if credentials is None:
        credentials = discover_credentials()
    payload = credentials.apply(payload)
    r = requests.post('https://api.pushover.net/1/messages.json', data=payload, headers={'User-Agent': 'Python'})
    return r
    
class PushoverCredentials(object):
    def __init__(self, user_id, api_token):
        self.user_id = str(user_id)
        self.api_token = str(api_token)
    
    def apply(self, payload):
        """Apply these credentials to a payload"""
        payload['user'] = self.user_id
        payload['token'] = self.api_token
        return payload
        
    
def discover_credentials():
    """Discover credentials from the environment."""
    return PushoverCredentials(os.environ['PUSHOVER_USER_ID'], os.environ['PUSHOVER_API_TOKEN'])
    
def status_message(status, message):
    """Construct a status message (presumably from a process exit code.)"""
    if status == 0:
        message += u" \u2705"
    else:
        message += u" \u274c {0:d}".format(status)
    return message
    
@click.command()
@click.option("-s", "--status", type=int, help="Status of previous command.", default=None)
@click.argument("message", nargs=-1)
def main(status, message):
    """Main function for this script."""
    
    message = " ".join(message)
    if status is not None:
        message = status_message(status, message)
    r = send_message(message, discover_credentials())
    if not r.status_code == 200:
        click.echo(r.text)
        raise click.Abort(r.status_code)
    
if __name__ == '__main__':
    main()
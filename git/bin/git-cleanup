#!/usr/bin/env python3

import argparse
import dataclasses as dc
import enum
import functools
import re
import shelve
import shlex
import subprocess
import sys
from pathlib import Path
from typing import Any, Iterable, Iterator, Optional


def command(message: str) -> Any:
    def decorator(func: Any) -> Any:
        @functools.wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -> Any:
            try:
                return func(*args, **kwargs)
            except subprocess.CalledProcessError as e:
                print("Error: {}".format(message), file=sys.stderr)
                print(e.stderr.decode(), file=sys.stderr)
                raise

        return wrapper

    return decorator


def handler() -> Any:
    def decorator(func: Any) -> Any:
        @functools.wraps(func)
        def wrapper(*args: Any, **kwargs: Any) -> Any:
            try:
                return func(*args, **kwargs)
            except subprocess.CalledProcessError:
                raise SystemExit(1)

        return wrapper

    return decorator


class Style(enum.IntEnum):
    BOLD = 1
    DIM = 2

    RED = 31
    GREEN = 32
    YELLOW = 33
    BLUE = 34
    MAGENTA = 35
    CYAN = 36


def ansi(text: str, *styles: Style) -> str:
    style = ";".join(str(style.value) for style in styles)
    return f"\033[{style}m{text}\033[0m"


def _show_git(*args: str) -> None:
    print(
        f"{ansi('>', Style.BOLD)} {ansi('git', Style.BOLD)} {' '.join(shlex.quote(arg) for arg in args)}"
    )


@dc.dataclass
class Git:
    root: Path

    @classmethod
    def toplevel(cls, start: Path) -> "Git":
        toplevel = subprocess.run(
            ["git", "rev-parse", "--show-toplevel"], check=False, capture_output=True
        )
        if toplevel.returncode != 0:
            raise ValueError("Not a git repository")
        return cls(Path(toplevel.stdout.decode().strip()))

    def __call__(self, *args: str) -> subprocess.CompletedProcess:
        _show_git(*args)
        return subprocess.run(
            ["git", "-C", str(self.root)] + list(args), check=False, capture_output=True
        )

    @command("determine primary branch")
    def remote_primary_branch(self, remote: str = "origin") -> Optional[str]:
        pattern = re.compile(r"^\s*HEAD branch: (.+)$")
        cmd = self("remote", "show", remote, "-n")

        if cmd.returncode != 0:
            return None

        for line in cmd.stdout.decode().splitlines():
            match = pattern.match(line)
            if match:
                branch = match.group(1)
                if branch.startswith("(") and branch.endswith(")"):
                    return None
                return branch

        return None

    @command("fetch remote")
    def fetch(self, remote: str = "origin", branch: str = "main") -> None:
        cmd = self("rev-parse", "--abbrev-ref", "HEAD")
        cmd.check_returncode()
        current_branch = cmd.stdout.decode().strip()

        if current_branch == branch:
            self("fetch", remote, "--prune").check_returncode()
            self("pull", "--ff-only", remote, branch).check_returncode()
        else:
            self("fetch", remote, "--prune", f"{branch}:{branch}").check_returncode()

    @command("local branches")
    def local_branches(self) -> Iterator[str]:
        cmd = self("branch", "--format", "%(refname:short)")
        cmd.check_returncode()
        for line in cmd.stdout.decode().splitlines():
            yield line.strip()

    @command("merged branches")
    def merged_branches(
        self, primary_branch: str, remote: Optional[str] = None
    ) -> Iterator[str]:
        if remote:
            cmd = self("branch", "--remote", "--merged", primary_branch)
        else:
            cmd = self("branch", "--merged", primary_branch)

        cmd.check_returncode()
        for line in cmd.stdout.decode().splitlines():
            branch = line.strip()
            if " " in branch:
                continue
            if branch == primary_branch:
                continue
            if remote and branch.startswith(f"{remote}/"):
                branch = branch[len(f"{remote}/") :]  # noqa: E203

            yield branch

    def merge_base(self, base: str, this: str) -> str:
        cmd = self("merge-base", base, this)
        cmd.check_returncode()
        return cmd.stdout.decode().strip()

    def resolve(self, branch: str) -> str:
        cmd = self("rev-parse", branch)
        cmd.check_returncode()
        return cmd.stdout.decode().strip()

    def get_patch_id(self, base: str, this: str) -> Optional[str]:
        with subprocess.Popen(
            ["git", "diff", "--no-color", "--patch", base, this],
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
        ) as diff:
            cmd = subprocess.run(
                ["git", "patch-id", "--stable"], stdin=diff.stdout, capture_output=True
            )
            cmd.check_returncode()

        if not cmd.stdout:
            return None

        patch_id, _ = cmd.stdout.decode().split(" ", 1)
        return patch_id

    @command("delete branch")
    def delete_branch(self, branch: str, dry_run: bool = False) -> None:
        if dry_run:
            print(f"Would delete branch {ansi(branch, Style.BOLD, Style.RED)}")
        else:
            self("branch", "-D", branch).check_returncode()


@command("dangling branches")
def find_dangling_branches(git: Git) -> Iterator[str]:
    cmd = git("branch", "--format", "%(refname:short) %(upstream:track)")
    cmd.check_returncode()

    for line in cmd.stdout.decode().splitlines():
        branch = line.strip()
        parts = list(branch.split())
        if len(parts) != 2:
            continue
        if parts[-1] == "[gone]":
            yield parts[0]


def get_primary_patches(
    git: Git, branch: str, primary_commit: str, shelf: shelve.Shelf
) -> Iterator[str]:
    cmd = git("rev-list", f"{branch}..{primary_commit}")
    cmd.check_returncode()

    commits = cmd.stdout.decode().splitlines()
    n = len(commits)
    hits = 0
    misses = 0

    for i, line in enumerate(commits, start=1):
        commit = line.strip()
        print(f"  {i}/{n}: {commit[:8]} ", end="")
        try:
            patch_id: str | None = shelf[commit]
        except KeyError:
            patch_id = git.get_patch_id(f"{commit}~", commit)
            shelf[commit] = patch_id
            print("( )" + " " * 5 + "\r", end="")
            misses += 1
            if misses % 1000 == 0:
                shelf.sync()
        else:
            hits += 1
            print("(c)" + " " * 5 + "\r", end="")

        if patch_id is not None:
            yield patch_id

    shelf.sync()
    print(f"  {hits} hits, {misses} misses" + " " * 15)


def is_squashed_branch(
    git: Git, branch: str, primary_branch: str, shelf: shelve.Shelf
) -> bool:
    base = git.merge_base(primary_branch, branch)
    branch_commit = git.resolve(branch)
    key = f"{branch_commit}..{base}"
    try:
        patch_id = shelf[key]
    except KeyError:
        patch_id = git.get_patch_id(base, branch_commit)
        shelf[key] = patch_id
        shelf.sync()

    if patch_id is None:
        print(ansi(f"# Empty {branch}", Style.DIM, Style.RED))
        return True

    for upstream_patch_id in get_primary_patches(git, branch, primary_branch, shelf):
        if patch_id == upstream_patch_id:
            print(ansi(f"# Squashed {branch}", Style.DIM, Style.RED))
            return True

    print(ansi(f"# Unfinished {branch}", Style.DIM, Style.YELLOW))
    return False


def delete_branches(git: Git, branches: Iterable[str], dry_run: bool = False) -> None:
    for branch in branches:
        git.delete_branch(branch, dry_run=dry_run)


@handler()
def main() -> int:
    parser = argparse.ArgumentParser(description="Clean up merged branches")
    parser.add_argument("--dry-run", action="store_true", help="Do not delete branches")

    fetch_group = parser.add_mutually_exclusive_group()
    fetch_group.add_argument(
        "--no-fetch", dest="fetch", action="store_false", help="Do not fetch remote"
    )
    fetch_group.add_argument("--fetch", action="store_true", help="Fetch remote")

    parser.add_argument(
        "--primary-branch", default="main", help="Default Primary branch"
    )
    parser.add_argument("--remote", default="origin", help="Remote name")
    parser.add_argument("--shelf", default=".git/git-cleanup-db", help="Shelf file")

    args = parser.parse_args()

    git = Git.toplevel(Path.cwd())
    primary_branch = git.remote_primary_branch(args.remote) or args.primary_branch

    if primary_branch is None:
        print("Could not determine primary branch")
        return 1

    if args.fetch:
        print("Fetching remote")
        git.fetch(args.remote, primary_branch)

    shelf_filename = git.root / args.shelf

    print("Finding merged and dangling branches")
    branches: set[str] = set()
    branches.update(git.merged_branches(primary_branch))
    branches.update(git.merged_branches(primary_branch, remote=args.remote))
    branches.update(find_dangling_branches(git))
    with shelve.open(shelf_filename) as shelf:
        for branch in git.local_branches():
            if branch in branches:
                continue

            if is_squashed_branch(git, branch, primary_branch, shelf):
                branches.add(branch)

    branches.intersection_update(git.local_branches())
    branches.discard(primary_branch)

    if not branches:
        print("No branches to delete")
        return 0
    print("Deleting branches")
    delete_branches(git, branches, dry_run=args.dry_run)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
